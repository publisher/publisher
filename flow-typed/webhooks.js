/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.8.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

import * as http from "http";
declare type Options = {
  secret: string,
  path?: string,
  transform?: (
    event: Webhooks$WebhookEvent<any>,
  ) => Webhooks$WebhookEvent<any> & {
    [key: string]: any,
  },
};
declare type Webhooks$WebhookPayloadWatchSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadWatch = {
  action: string,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadWatchSender,
};

declare type Webhooks$WebhookPayloadTeamAddSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadTeamAddOrganization = {
  login: string,
  id: number,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};

declare type Webhooks$WebhookPayloadTeamAddTeam = {
  name: string,
  id: number,
  node_id: string,
  slug: string,
  description: string,
  privacy: string,
  url: string,
  members_url: string,
  repositories_url: string,
  permission: string,
};

declare type Webhooks$WebhookPayloadTeamAdd = {
  team: Webhooks$WebhookPayloadTeamAddTeam,
  repository: Webhooks$PayloadRepository,
  organization: Webhooks$WebhookPayloadTeamAddOrganization,
  sender: Webhooks$WebhookPayloadTeamAddSender,
};

declare type Webhooks$WebhookPayloadTeamSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadTeamOrganization = {
  login: string,
  id: number,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};

declare type Webhooks$PayloadRepositoryPermissions = {
  pull: boolean,
  push: boolean,
  admin: boolean,
};

declare type Webhooks$WebhookPayloadTeamTeam = {
  name: string,
  id: number,
  node_id: string,
  slug: string,
  description: string,
  privacy: string,
  url: string,
  members_url: string,
  repositories_url: string,
  permission: string,
};

declare type Webhooks$WebhookPayloadTeam = {
  action: string,
  team: Webhooks$WebhookPayloadTeamTeam,
  repository: Webhooks$PayloadRepository,
  organization: Webhooks$WebhookPayloadTeamOrganization,
  sender: Webhooks$WebhookPayloadTeamSender,
};

declare type Webhooks$WebhookPayloadStatusSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadStatusBranchesItemCommit = {
  sha: string,
  url: string,
};

declare type Webhooks$WebhookPayloadStatusBranchesItem = {
  name: string,
  commit: Webhooks$WebhookPayloadStatusBranchesItemCommit,
};

declare type Webhooks$WebhookPayloadStatusCommitCommitter = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadStatusCommitAuthor = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadStatusCommitCommitVerification = {
  verified: boolean,
  reason: string,
  signature: string,
  payload: string,
};

declare type Webhooks$WebhookPayloadStatusCommitCommitTree = {
  sha: string,
  url: string,
};

declare type Webhooks$WebhookPayloadStatusCommitCommitCommitter = {
  name: string,
  email: string,
  date: string,
};

declare type Webhooks$WebhookPayloadStatusCommitCommitAuthor = {
  name: string,
  email: string,
  date: string,
};

declare type Webhooks$WebhookPayloadStatusCommitCommit = {
  author: Webhooks$WebhookPayloadStatusCommitCommitAuthor,
  committer: Webhooks$WebhookPayloadStatusCommitCommitCommitter,
  message: string,
  tree: Webhooks$WebhookPayloadStatusCommitCommitTree,
  url: string,
  comment_count: number,
  verification: Webhooks$WebhookPayloadStatusCommitCommitVerification,
};

declare type Webhooks$WebhookPayloadStatusCommit = {
  sha: string,
  node_id: string,
  commit: Webhooks$WebhookPayloadStatusCommitCommit,
  url: string,
  html_url: string,
  comments_url: string,
  author: Webhooks$WebhookPayloadStatusCommitAuthor,
  committer: Webhooks$WebhookPayloadStatusCommitCommitter,
  parents: Array<any>,
};

declare type Webhooks$WebhookPayloadStatus = {
  id: number,
  sha: string,
  name: string,
  target_url: null,
  context: string,
  description: null,
  state: string,
  commit: Webhooks$WebhookPayloadStatusCommit,
  branches: Array<Webhooks$WebhookPayloadStatusBranchesItem>,
  created_at: string,
  updated_at: string,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadStatusSender,
};

declare type Webhooks$WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion = {
  identifier: string,
};

declare type Webhooks$WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemPackage = {
  ecosystem: string,
  name: string,
};

declare type Webhooks$WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItem = {
  package: Webhooks$WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemPackage,
  severity: string,
  vulnerable_version_range: string,
  first_patched_version: Webhooks$WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion,
};

declare type Webhooks$WebhookPayloadSecurityAdvisorySecurityAdvisoryReferencesItem = {
  url: string,
};

declare type Webhooks$WebhookPayloadSecurityAdvisorySecurityAdvisoryIdentifiersItem = {
  value: string,
  type: string,
};

declare type Webhooks$WebhookPayloadSecurityAdvisorySecurityAdvisory = {
  ghsa_id: string,
  summary: string,
  description: string,
  severity: string,
  identifiers: Array<Webhooks$WebhookPayloadSecurityAdvisorySecurityAdvisoryIdentifiersItem>,
  references: Array<Webhooks$WebhookPayloadSecurityAdvisorySecurityAdvisoryReferencesItem>,
  published_at: string,
  updated_at: string,
  withdrawn_at: null,
  vulnerabilities: Array<Webhooks$WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItem>,
};

declare type Webhooks$WebhookPayloadSecurityAdvisory = {
  action: string,
  security_advisory: Webhooks$WebhookPayloadSecurityAdvisorySecurityAdvisory,
};

declare type Webhooks$WebhookPayloadRepositoryVulnerabilityAlertAlertDismisser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadRepositoryVulnerabilityAlertAlert = {
  id: number,
  affected_range: string,
  affected_package_name: string,
  external_reference: string,
  external_identifier: string,
  fixed_in: string,
  dismisser: Webhooks$WebhookPayloadRepositoryVulnerabilityAlertAlertDismisser,
  dismiss_reason: string,
  dismissed_at: string,
};

declare type Webhooks$WebhookPayloadRepositoryVulnerabilityAlert = {
  action: string,
  alert: Webhooks$WebhookPayloadRepositoryVulnerabilityAlertAlert,
};

declare type Webhooks$WebhookPayloadRepositoryImportSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadRepositoryImportOrganization = {
  login: string,
  id: number,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};

declare type Webhooks$WebhookPayloadRepositoryImport = {
  status: string,
  repository: Webhooks$PayloadRepository,
  organization: Webhooks$WebhookPayloadRepositoryImportOrganization,
  sender: Webhooks$WebhookPayloadRepositoryImportSender,
};

declare type Webhooks$WebhookPayloadRepositorySender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadRepository = {
  action: string,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadRepositorySender,
};

declare type Webhooks$WebhookPayloadReleaseSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadReleaseReleaseAuthor = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadReleaseRelease = {
  url: string,
  assets_url: string,
  upload_url: string,
  html_url: string,
  id: number,
  node_id: string,
  tag_name: string,
  target_commitish: string,
  name: null,
  draft: boolean,
  author: Webhooks$WebhookPayloadReleaseReleaseAuthor,
  prerelease: boolean,
  created_at: string,
  published_at: string,
  assets: Array<any>,
  tarball_url: string,
  zipball_url: string,
  body: null,
};

declare type Webhooks$WebhookPayloadRelease = {
  action: string,
  release: Webhooks$WebhookPayloadReleaseRelease,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadReleaseSender,
};

declare type Webhooks$WebhookPayloadPushSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPushPusher = {
  name: string,
  email: string,
};

declare type Webhooks$WebhookPayloadPush = {
  ref: string,
  before: string,
  after: string,
  created: boolean,
  deleted: boolean,
  forced: boolean,
  base_ref: null,
  compare: string,
  commits: Array<any>,
  head_commit: null,
  repository: Webhooks$PayloadRepository,
  pusher: Webhooks$WebhookPayloadPushPusher,
  sender: Webhooks$WebhookPayloadPushSender,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksStatuses = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksCommits = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksReviewComment = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksReviewComments = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksComments = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksIssue = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksHtml = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksSelf = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinks = {
  self: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksSelf,
  html: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksHtml,
  issue: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksIssue,
  comments: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksComments,
  review_comments: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksReviewComments,
  review_comment: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksReviewComment,
  commits: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksCommits,
  statuses: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinksStatuses,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestBaseRepoOwner = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestBaseRepo = {
  id: number,
  node_id: string,
  name: string,
  full_name: string,
  owner: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestBaseRepoOwner,
  private: boolean,
  html_url: string,
  description: null,
  fork: boolean,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string,
  updated_at: string,
  pushed_at: string,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: null,
  size: number,
  stargazers_count: number,
  watchers_count: number,
  language: null,
  has_issues: boolean,
  has_projects: boolean,
  has_downloads: boolean,
  has_wiki: boolean,
  has_pages: boolean,
  forks_count: number,
  mirror_url: null,
  archived: boolean,
  open_issues_count: number,
  license: null,
  forks: number,
  open_issues: number,
  watchers: number,
  default_branch: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestBaseUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestBase = {
  label: string,
  ref: string,
  sha: string,
  user: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestBaseUser,
  repo: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestBaseRepo,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestHeadRepoOwner = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestHeadRepo = {
  id: number,
  node_id: string,
  name: string,
  full_name: string,
  owner: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestHeadRepoOwner,
  private: boolean,
  html_url: string,
  description: null,
  fork: boolean,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string,
  updated_at: string,
  pushed_at: string,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: null,
  size: number,
  stargazers_count: number,
  watchers_count: number,
  language: null,
  has_issues: boolean,
  has_projects: boolean,
  has_downloads: boolean,
  has_wiki: boolean,
  has_pages: boolean,
  forks_count: number,
  mirror_url: null,
  archived: boolean,
  open_issues_count: number,
  license: null,
  forks: number,
  open_issues: number,
  watchers: number,
  default_branch: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestHeadUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestHead = {
  label: string,
  ref: string,
  sha: string,
  user: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestHeadUser,
  repo: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestHeadRepo,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentPullRequest = {
  url: string,
  id: number,
  node_id: string,
  html_url: string,
  diff_url: string,
  patch_url: string,
  issue_url: string,
  number: number,
  state: string,
  locked: boolean,
  title: string,
  user: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestUser,
  body: string,
  created_at: string,
  updated_at: string,
  closed_at: null,
  merged_at: null,
  merge_commit_sha: string,
  assignee: null,
  assignees: Array<any>,
  requested_reviewers: Array<any>,
  requested_teams: Array<any>,
  labels: Array<any>,
  milestone: null,
  commits_url: string,
  review_comments_url: string,
  review_comment_url: string,
  comments_url: string,
  statuses_url: string,
  head: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestHead,
  base: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestBase,
  _links: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequestLinks,
  author_association: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentCommentLinksPullRequest = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentCommentLinksHtml = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentCommentLinksSelf = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentCommentLinks = {
  self: Webhooks$WebhookPayloadPullRequestReviewCommentCommentLinksSelf,
  html: Webhooks$WebhookPayloadPullRequestReviewCommentCommentLinksHtml,
  pull_request: Webhooks$WebhookPayloadPullRequestReviewCommentCommentLinksPullRequest,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentCommentUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestReviewCommentComment = {
  url: string,
  pull_request_review_id: number,
  id: number,
  node_id: string,
  diff_hunk: string,
  path: string,
  position: number,
  original_position: number,
  commit_id: string,
  original_commit_id: string,
  user: Webhooks$WebhookPayloadPullRequestReviewCommentCommentUser,
  body: string,
  created_at: string,
  updated_at: string,
  html_url: string,
  pull_request_url: string,
  author_association: string,
  _links: Webhooks$WebhookPayloadPullRequestReviewCommentCommentLinks,
};

declare type Webhooks$WebhookPayloadPullRequestReviewComment = {
  action: string,
  comment: Webhooks$WebhookPayloadPullRequestReviewCommentComment,
  pull_request: Webhooks$WebhookPayloadPullRequestReviewCommentPullRequest,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadPullRequestReviewCommentSender,
};

declare type Webhooks$WebhookPayloadPullRequestReviewSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksStatuses = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksCommits = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksReviewComment = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksReviewComments = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksComments = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksIssue = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksHtml = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksSelf = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestLinks = {
  self: Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksSelf,
  html: Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksHtml,
  issue: Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksIssue,
  comments: Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksComments,
  review_comments: Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksReviewComments,
  review_comment: Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksReviewComment,
  commits: Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksCommits,
  statuses: Webhooks$WebhookPayloadPullRequestReviewPullRequestLinksStatuses,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestBaseRepoOwner = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestBaseRepo = {
  id: number,
  node_id: string,
  name: string,
  full_name: string,
  owner: Webhooks$WebhookPayloadPullRequestReviewPullRequestBaseRepoOwner,
  private: boolean,
  html_url: string,
  description: null,
  fork: boolean,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string,
  updated_at: string,
  pushed_at: string,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: null,
  size: number,
  stargazers_count: number,
  watchers_count: number,
  language: null,
  has_issues: boolean,
  has_projects: boolean,
  has_downloads: boolean,
  has_wiki: boolean,
  has_pages: boolean,
  forks_count: number,
  mirror_url: null,
  archived: boolean,
  open_issues_count: number,
  license: null,
  forks: number,
  open_issues: number,
  watchers: number,
  default_branch: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestBaseUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestBase = {
  label: string,
  ref: string,
  sha: string,
  user: Webhooks$WebhookPayloadPullRequestReviewPullRequestBaseUser,
  repo: Webhooks$WebhookPayloadPullRequestReviewPullRequestBaseRepo,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestHeadRepoOwner = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestHeadRepo = {
  id: number,
  node_id: string,
  name: string,
  full_name: string,
  owner: Webhooks$WebhookPayloadPullRequestReviewPullRequestHeadRepoOwner,
  private: boolean,
  html_url: string,
  description: null,
  fork: boolean,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string,
  updated_at: string,
  pushed_at: string,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: null,
  size: number,
  stargazers_count: number,
  watchers_count: number,
  language: null,
  has_issues: boolean,
  has_projects: boolean,
  has_downloads: boolean,
  has_wiki: boolean,
  has_pages: boolean,
  forks_count: number,
  mirror_url: null,
  archived: boolean,
  open_issues_count: number,
  license: null,
  forks: number,
  open_issues: number,
  watchers: number,
  default_branch: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestHeadUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestHead = {
  label: string,
  ref: string,
  sha: string,
  user: Webhooks$WebhookPayloadPullRequestReviewPullRequestHeadUser,
  repo: Webhooks$WebhookPayloadPullRequestReviewPullRequestHeadRepo,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequestUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestReviewPullRequest = {
  url: string,
  id: number,
  node_id: string,
  html_url: string,
  diff_url: string,
  patch_url: string,
  issue_url: string,
  number: number,
  state: string,
  locked: boolean,
  title: string,
  user: Webhooks$WebhookPayloadPullRequestReviewPullRequestUser,
  body: string,
  created_at: string,
  updated_at: string,
  closed_at: null,
  merged_at: null,
  merge_commit_sha: string,
  assignee: null,
  assignees: Array<any>,
  requested_reviewers: Array<any>,
  requested_teams: Array<any>,
  labels: Array<any>,
  milestone: null,
  commits_url: string,
  review_comments_url: string,
  review_comment_url: string,
  comments_url: string,
  statuses_url: string,
  head: Webhooks$WebhookPayloadPullRequestReviewPullRequestHead,
  base: Webhooks$WebhookPayloadPullRequestReviewPullRequestBase,
  _links: Webhooks$WebhookPayloadPullRequestReviewPullRequestLinks,
  author_association: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewReviewLinksPullRequest = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewReviewLinksHtml = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestReviewReviewLinks = {
  html: Webhooks$WebhookPayloadPullRequestReviewReviewLinksHtml,
  pull_request: Webhooks$WebhookPayloadPullRequestReviewReviewLinksPullRequest,
};

declare type Webhooks$WebhookPayloadPullRequestReviewReviewUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestReviewReview = {
  id: number,
  node_id: string,
  user: Webhooks$WebhookPayloadPullRequestReviewReviewUser,
  body: null,
  commit_id: string,
  submitted_at: string,
  state: string,
  html_url: string,
  pull_request_url: string,
  author_association: string,
  _links: Webhooks$WebhookPayloadPullRequestReviewReviewLinks,
};

declare type Webhooks$WebhookPayloadPullRequestReview = {
  action: string,
  review: Webhooks$WebhookPayloadPullRequestReviewReview,
  pull_request: Webhooks$WebhookPayloadPullRequestReviewPullRequest,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadPullRequestReviewSender,
};

declare type Webhooks$WebhookPayloadPullRequestSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestLinksStatuses = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestLinksCommits = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestLinksReviewComment = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestLinksReviewComments = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestLinksComments = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestLinksIssue = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestLinksHtml = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestLinksSelf = {
  href: string,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestLinks = {
  self: Webhooks$WebhookPayloadPullRequestPullRequestLinksSelf,
  html: Webhooks$WebhookPayloadPullRequestPullRequestLinksHtml,
  issue: Webhooks$WebhookPayloadPullRequestPullRequestLinksIssue,
  comments: Webhooks$WebhookPayloadPullRequestPullRequestLinksComments,
  review_comments: Webhooks$WebhookPayloadPullRequestPullRequestLinksReviewComments,
  review_comment: Webhooks$WebhookPayloadPullRequestPullRequestLinksReviewComment,
  commits: Webhooks$WebhookPayloadPullRequestPullRequestLinksCommits,
  statuses: Webhooks$WebhookPayloadPullRequestPullRequestLinksStatuses,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestBaseRepoOwner = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestBaseRepo = {
  id: number,
  node_id: string,
  name: string,
  full_name: string,
  owner: Webhooks$WebhookPayloadPullRequestPullRequestBaseRepoOwner,
  private: boolean,
  html_url: string,
  description: null,
  fork: boolean,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string,
  updated_at: string,
  pushed_at: string,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: null,
  size: number,
  stargazers_count: number,
  watchers_count: number,
  language: null,
  has_issues: boolean,
  has_projects: boolean,
  has_downloads: boolean,
  has_wiki: boolean,
  has_pages: boolean,
  forks_count: number,
  mirror_url: null,
  archived: boolean,
  open_issues_count: number,
  license: null,
  forks: number,
  open_issues: number,
  watchers: number,
  default_branch: string,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestBaseUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestBase = {
  label: string,
  ref: string,
  sha: string,
  user: Webhooks$WebhookPayloadPullRequestPullRequestBaseUser,
  repo: Webhooks$WebhookPayloadPullRequestPullRequestBaseRepo,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestHeadRepoOwner = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestHeadRepo = {
  id: number,
  node_id: string,
  name: string,
  full_name: string,
  owner: Webhooks$WebhookPayloadPullRequestPullRequestHeadRepoOwner,
  private: boolean,
  html_url: string,
  description: null,
  fork: boolean,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string,
  updated_at: string,
  pushed_at: string,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: null,
  size: number,
  stargazers_count: number,
  watchers_count: number,
  language: null,
  has_issues: boolean,
  has_projects: boolean,
  has_downloads: boolean,
  has_wiki: boolean,
  has_pages: boolean,
  forks_count: number,
  mirror_url: null,
  archived: boolean,
  open_issues_count: number,
  license: null,
  forks: number,
  open_issues: number,
  watchers: number,
  default_branch: string,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestHeadUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestHead = {
  label: string,
  ref: string,
  sha: string,
  user: Webhooks$WebhookPayloadPullRequestPullRequestHeadUser,
  repo: Webhooks$WebhookPayloadPullRequestPullRequestHeadRepo,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequestUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPullRequestPullRequest = {
  url: string,
  id: number,
  node_id: string,
  html_url: string,
  diff_url: string,
  patch_url: string,
  issue_url: string,
  number: number,
  state: string,
  locked: boolean,
  title: string,
  user: Webhooks$WebhookPayloadPullRequestPullRequestUser,
  body: string,
  created_at: string,
  updated_at: string,
  closed_at: string,
  merged_at: null,
  merge_commit_sha: string,
  assignee: null,
  assignees: Array<any>,
  requested_reviewers: Array<any>,
  requested_teams: Array<any>,
  labels: Array<any>,
  milestone: null,
  commits_url: string,
  review_comments_url: string,
  review_comment_url: string,
  comments_url: string,
  statuses_url: string,
  head: Webhooks$WebhookPayloadPullRequestPullRequestHead,
  base: Webhooks$WebhookPayloadPullRequestPullRequestBase,
  _links: Webhooks$WebhookPayloadPullRequestPullRequestLinks,
  author_association: string,
  merged: boolean,
  mergeable: boolean,
  rebaseable: boolean,
  mergeable_state: string,
  merged_by: null,
  comments: number,
  review_comments: number,
  maintainer_can_modify: boolean,
  commits: number,
  additions: number,
  deletions: number,
  changed_files: number,
};

declare type Webhooks$WebhookPayloadPullRequest = {
  action: string,
  number: number,
  pull_request: Webhooks$WebhookPayloadPullRequestPullRequest,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadPullRequestSender,
};

declare type Webhooks$WebhookPayloadPublicSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPublic = {
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadPublicSender,
};

declare type Webhooks$WebhookPayloadProjectSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadProjectProjectCreator = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadProjectProject = {
  owner_url: string,
  url: string,
  html_url: string,
  columns_url: string,
  id: number,
  node_id: string,
  name: string,
  body: string,
  number: number,
  state: string,
  creator: Webhooks$WebhookPayloadProjectProjectCreator,
  created_at: string,
  updated_at: string,
};

declare type Webhooks$WebhookPayloadProject = {
  action: string,
  project: Webhooks$WebhookPayloadProjectProject,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadProjectSender,
};

declare type Webhooks$WebhookPayloadProjectColumnSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadProjectColumnProjectColumn = {
  url: string,
  project_url: string,
  cards_url: string,
  id: number,
  node_id: string,
  name: string,
  created_at: string,
  updated_at: string,
};

declare type Webhooks$WebhookPayloadProjectColumn = {
  action: string,
  project_column: Webhooks$WebhookPayloadProjectColumnProjectColumn,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadProjectColumnSender,
};

declare type Webhooks$WebhookPayloadProjectCardSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadProjectCardProjectCardCreator = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadProjectCardProjectCard = {
  url: string,
  project_url: string,
  column_url: string,
  column_id: number,
  id: number,
  node_id: string,
  note: string,
  creator: Webhooks$WebhookPayloadProjectCardProjectCardCreator,
  created_at: string,
  updated_at: string,
};

declare type Webhooks$WebhookPayloadProjectCard = {
  action: string,
  project_card: Webhooks$WebhookPayloadProjectCardProjectCard,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadProjectCardSender,
};

declare type Webhooks$WebhookPayloadPageBuildSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPageBuildBuildPusher = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadPageBuildBuildError = {
  message: null,
};

declare type Webhooks$WebhookPayloadPageBuildBuild = {
  url: string,
  status: string,
  error: Webhooks$WebhookPayloadPageBuildBuildError,
  pusher: Webhooks$WebhookPayloadPageBuildBuildPusher,
  commit: string,
  duration: number,
  created_at: string,
  updated_at: string,
};

declare type Webhooks$WebhookPayloadPageBuild = {
  id: number,
  build: Webhooks$WebhookPayloadPageBuildBuild,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadPageBuildSender,
};

declare type Webhooks$WebhookPayloadOrgBlockSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadOrgBlockOrganization = {
  login: string,
  id: number,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};

declare type Webhooks$WebhookPayloadOrgBlockBlockedUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadOrgBlock = {
  action: string,
  blocked_user: Webhooks$WebhookPayloadOrgBlockBlockedUser,
  organization: Webhooks$WebhookPayloadOrgBlockOrganization,
  sender: Webhooks$WebhookPayloadOrgBlockSender,
};

declare type Webhooks$WebhookPayloadOrganizationSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadOrganizationOrganization = {
  login: string,
  id: number,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};

declare type Webhooks$WebhookPayloadOrganizationMembershipUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadOrganizationMembership = {
  url: string,
  state: string,
  role: string,
  organization_url: string,
  user: Webhooks$WebhookPayloadOrganizationMembershipUser,
};

declare type Webhooks$WebhookPayloadOrganization = {
  action: string,
  membership: Webhooks$WebhookPayloadOrganizationMembership,
  organization: Webhooks$WebhookPayloadOrganizationOrganization,
  sender: Webhooks$WebhookPayloadOrganizationSender,
};

declare type Webhooks$WebhookPayloadMilestoneSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadMilestoneMilestoneCreator = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadMilestoneMilestone = {
  url: string,
  html_url: string,
  labels_url: string,
  id: number,
  node_id: string,
  number: number,
  title: string,
  description: string,
  creator: Webhooks$WebhookPayloadMilestoneMilestoneCreator,
  open_issues: number,
  closed_issues: number,
  state: string,
  created_at: string,
  updated_at: string,
  due_on: string,
  closed_at: null,
};

declare type Webhooks$WebhookPayloadMilestone = {
  action: string,
  milestone: Webhooks$WebhookPayloadMilestoneMilestone,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadMilestoneSender,
};

declare type Webhooks$WebhookPayloadMembershipOrganization = {
  login: string,
  id: number,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};

declare type Webhooks$WebhookPayloadMembershipTeam = {
  name: string,
  id: number,
  node_id: string,
  slug: string,
  description: string,
  privacy: string,
  url: string,
  members_url: string,
  repositories_url: string,
  permission: string,
};

declare type Webhooks$WebhookPayloadMembershipSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadMembershipMember = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadMembership = {
  action: string,
  scope: string,
  member: Webhooks$WebhookPayloadMembershipMember,
  sender: Webhooks$WebhookPayloadMembershipSender,
  team: Webhooks$WebhookPayloadMembershipTeam,
  organization: Webhooks$WebhookPayloadMembershipOrganization,
};

declare type Webhooks$WebhookPayloadMemberSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadMemberChangesPermission = {
  from: string,
};

declare type Webhooks$WebhookPayloadMemberChanges = {
  permission: Webhooks$WebhookPayloadMemberChangesPermission,
};

declare type Webhooks$WebhookPayloadMemberMember = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadMember = {
  action: string,
  member: Webhooks$WebhookPayloadMemberMember,
  changes: Webhooks$WebhookPayloadMemberChanges,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadMemberSender,
};

declare type Webhooks$WebhookPayloadMarketplacePurchaseMarketplacePurchasePlan = {
  id: number,
  name: string,
  description: string,
  monthly_price_in_cents: number,
  yearly_price_in_cents: number,
  price_model: string,
  has_free_trial: boolean,
  unit_name: string,
  bullets: Array<string>,
};

declare type Webhooks$WebhookPayloadMarketplacePurchaseMarketplacePurchaseAccount = {
  type: string,
  id: number,
  login: string,
  organization_billing_email: string,
};

declare type Webhooks$WebhookPayloadMarketplacePurchaseMarketplacePurchase = {
  account: Webhooks$WebhookPayloadMarketplacePurchaseMarketplacePurchaseAccount,
  billing_cycle: string,
  unit_count: number,
  on_free_trial: boolean,
  free_trial_ends_on: null,
  next_billing_date: string,
  plan: Webhooks$WebhookPayloadMarketplacePurchaseMarketplacePurchasePlan,
};

declare type Webhooks$WebhookPayloadMarketplacePurchaseSender = {
  login: string,
  id: number,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
  email: string,
};

declare type Webhooks$WebhookPayloadMarketplacePurchase = {
  action: string,
  effective_date: string,
  sender: Webhooks$WebhookPayloadMarketplacePurchaseSender,
  marketplace_purchase: Webhooks$WebhookPayloadMarketplacePurchaseMarketplacePurchase,
};

declare type Webhooks$WebhookPayloadLabelSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadLabelLabel = {
  id: number,
  node_id: string,
  url: string,
  name: string,
  color: string,
  default: boolean,
};

declare type Webhooks$WebhookPayloadLabel = {
  action: string,
  label: Webhooks$WebhookPayloadLabelLabel,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadLabelSender,
};

declare type Webhooks$WebhookPayloadIssuesSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadIssuesChanges = {};

declare type Webhooks$WebhookPayloadIssuesIssueLabelsItem = {
  id: number,
  node_id: string,
  url: string,
  name: string,
  color: string,
  default: boolean,
};

declare type Webhooks$WebhookPayloadIssuesIssueUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadIssuesIssue = {
  url: string,
  repository_url: string,
  labels_url: string,
  comments_url: string,
  events_url: string,
  html_url: string,
  id: number,
  node_id: string,
  number: number,
  title: string,
  user: Webhooks$WebhookPayloadIssuesIssueUser,
  labels: Array<Webhooks$WebhookPayloadIssuesIssueLabelsItem>,
  state: string,
  locked: boolean,
  assignee: null,
  assignees: Array<any>,
  milestone: null,
  comments: number,
  created_at: string,
  updated_at: string,
  closed_at: null,
  author_association: string,
  body: string,
};

declare type Webhooks$WebhookPayloadIssues = {
  action: string,
  issue: Webhooks$WebhookPayloadIssuesIssue,
  changes: Webhooks$WebhookPayloadIssuesChanges,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadIssuesSender,
};

declare type Webhooks$WebhookPayloadIssueCommentSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadIssueCommentCommentUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadIssueCommentComment = {
  url: string,
  html_url: string,
  issue_url: string,
  id: number,
  node_id: string,
  user: Webhooks$WebhookPayloadIssueCommentCommentUser,
  created_at: string,
  updated_at: string,
  author_association: string,
  body: string,
};

declare type Webhooks$WebhookPayloadIssueCommentIssueLabelsItem = {
  id: number,
  node_id: string,
  url: string,
  name: string,
  color: string,
  default: boolean,
};

declare type Webhooks$WebhookPayloadIssueCommentIssueUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadIssueCommentIssue = {
  url: string,
  repository_url: string,
  labels_url: string,
  comments_url: string,
  events_url: string,
  html_url: string,
  id: number,
  node_id: string,
  number: number,
  title: string,
  user: Webhooks$WebhookPayloadIssueCommentIssueUser,
  labels: Array<Webhooks$WebhookPayloadIssueCommentIssueLabelsItem>,
  state: string,
  locked: boolean,
  assignee: null,
  assignees: Array<any>,
  milestone: null,
  comments: number,
  created_at: string,
  updated_at: string,
  closed_at: null,
  author_association: string,
  body: string,
};

declare type Webhooks$WebhookPayloadIssueComment = {
  action: string,
  issue: Webhooks$WebhookPayloadIssueCommentIssue,
  comment: Webhooks$WebhookPayloadIssueCommentComment,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadIssueCommentSender,
};

declare type Webhooks$WebhookPayloadInstallationRepositoriesSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadInstallationRepositoriesRepositoriesRemovedItem = {
  id: number,
  name: string,
  full_name: string,
  private: boolean,
};

declare type Webhooks$WebhookPayloadInstallationRepositoriesInstallationPermissions = {
  metadata: string,
  contents: string,
  issues: string,
};

declare type Webhooks$WebhookPayloadInstallationRepositoriesInstallationAccount = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadInstallationRepositoriesInstallation = {
  id: number,
  account: Webhooks$WebhookPayloadInstallationRepositoriesInstallationAccount,
  repository_selection: string,
  access_tokens_url: string,
  repositories_url: string,
  html_url: string,
  app_id: number,
  target_id: number,
  target_type: string,
  permissions: Webhooks$WebhookPayloadInstallationRepositoriesInstallationPermissions,
  events: Array<string>,
  created_at: number,
  updated_at: number,
  single_file_name: string,
};

declare type Webhooks$WebhookPayloadInstallationRepositories = {
  action: string,
  installation: Webhooks$WebhookPayloadInstallationRepositoriesInstallation,
  repository_selection: string,
  repositories_added: Array<any>,
  repositories_removed: Array<Webhooks$WebhookPayloadInstallationRepositoriesRepositoriesRemovedItem>,
  sender: Webhooks$WebhookPayloadInstallationRepositoriesSender,
};

declare type Webhooks$WebhookPayloadInstallationSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadInstallationRepositoriesItem = {
  id: number,
  name: string,
  full_name: string,
  private: boolean,
};

declare type Webhooks$WebhookPayloadInstallationInstallationPermissions = {
  metadata: string,
  contents: string,
  issues: string,
};

declare type Webhooks$WebhookPayloadInstallationInstallationAccount = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadInstallationInstallation = {
  id: number,
  account: Webhooks$WebhookPayloadInstallationInstallationAccount,
  repository_selection: string,
  access_tokens_url: string,
  repositories_url: string,
  html_url: string,
  app_id: number,
  target_id: number,
  target_type: string,
  permissions: Webhooks$WebhookPayloadInstallationInstallationPermissions,
  events: Array<string>,
  created_at: number,
  updated_at: number,
  single_file_name: string,
};

declare type Webhooks$WebhookPayloadInstallation = {
  action: string,
  installation: Webhooks$WebhookPayloadInstallationInstallation,
  repositories: Array<Webhooks$WebhookPayloadInstallationRepositoriesItem>,
  sender: Webhooks$WebhookPayloadInstallationSender,
};

declare type Webhooks$WebhookPayloadGollumSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadGollumPagesItem = {
  page_name: string,
  title: string,
  summary: null,
  action: string,
  sha: string,
  html_url: string,
};

declare type Webhooks$WebhookPayloadGollum = {
  pages: Array<Webhooks$WebhookPayloadGollumPagesItem>,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadGollumSender,
};

declare type Webhooks$WebhookPayloadGithubAppAuthorizationSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadGithubAppAuthorization = {
  action: string,
  sender: Webhooks$WebhookPayloadGithubAppAuthorizationSender,
};

declare type Webhooks$WebhookPayloadForkSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadForkForkeeOwner = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadForkForkee = {
  id: number,
  node_id: string,
  name: string,
  full_name: string,
  owner: Webhooks$WebhookPayloadForkForkeeOwner,
  private: boolean,
  html_url: string,
  description: null,
  fork: boolean,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string,
  updated_at: string,
  pushed_at: string,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: null,
  size: number,
  stargazers_count: number,
  watchers_count: number,
  language: null,
  has_issues: boolean,
  has_projects: boolean,
  has_downloads: boolean,
  has_wiki: boolean,
  has_pages: boolean,
  forks_count: number,
  mirror_url: null,
  archived: boolean,
  open_issues_count: number,
  license: null,
  forks: number,
  open_issues: number,
  watchers: number,
  default_branch: string,
  public: boolean,
};

declare type Webhooks$WebhookPayloadFork = {
  forkee: Webhooks$WebhookPayloadForkForkee,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadForkSender,
};

declare type Webhooks$WebhookPayloadDeploymentStatusSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadDeploymentStatusDeploymentCreator = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadDeploymentStatusDeploymentPayload = {};

declare type Webhooks$WebhookPayloadDeploymentStatusDeployment = {
  url: string,
  id: number,
  node_id: string,
  sha: string,
  ref: string,
  task: string,
  payload: Webhooks$WebhookPayloadDeploymentStatusDeploymentPayload,
  environment: string,
  description: null,
  creator: Webhooks$WebhookPayloadDeploymentStatusDeploymentCreator,
  created_at: string,
  updated_at: string,
  statuses_url: string,
  repository_url: string,
};

declare type Webhooks$WebhookPayloadDeploymentStatusDeploymentStatusCreator = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadDeploymentStatusDeploymentStatus = {
  url: string,
  id: number,
  node_id: string,
  state: string,
  creator: Webhooks$WebhookPayloadDeploymentStatusDeploymentStatusCreator,
  description: string,
  target_url: string,
  created_at: string,
  updated_at: string,
  deployment_url: string,
  repository_url: string,
};

declare type Webhooks$WebhookPayloadDeploymentStatus = {
  deployment_status: Webhooks$WebhookPayloadDeploymentStatusDeploymentStatus,
  deployment: Webhooks$WebhookPayloadDeploymentStatusDeployment,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadDeploymentStatusSender,
};

declare type Webhooks$WebhookPayloadDeploymentSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadDeploymentDeploymentCreator = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadDeploymentDeploymentPayload = {};

declare type Webhooks$WebhookPayloadDeploymentDeployment = {
  url: string,
  id: number,
  node_id: string,
  sha: string,
  ref: string,
  task: string,
  payload: Webhooks$WebhookPayloadDeploymentDeploymentPayload,
  environment: string,
  description: null,
  creator: Webhooks$WebhookPayloadDeploymentDeploymentCreator,
  created_at: string,
  updated_at: string,
  statuses_url: string,
  repository_url: string,
};

declare type Webhooks$WebhookPayloadDeployment = {
  deployment: Webhooks$WebhookPayloadDeploymentDeployment,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadDeploymentSender,
};

declare type Webhooks$WebhookPayloadDeleteSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadDelete = {
  ref: string,
  ref_type: string,
  pusher_type: string,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadDeleteSender,
};

declare type Webhooks$WebhookPayloadCreateSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadCreate = {
  ref: string,
  ref_type: string,
  master_branch: string,
  description: null,
  pusher_type: string,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadCreateSender,
};

declare type Webhooks$WebhookPayloadContentReferenceInstallation = {
  id: number,
  node_id: string,
};

declare type Webhooks$WebhookPayloadContentReferenceSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadContentReferenceContentReference = {
  id: number,
  node_id: string,
  reference: string,
};

declare type Webhooks$WebhookPayloadContentReference = {
  action: string,
  content_reference: Webhooks$WebhookPayloadContentReferenceContentReference,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadContentReferenceSender,
  installation: Webhooks$WebhookPayloadContentReferenceInstallation,
};

declare type Webhooks$WebhookPayloadCommitCommentSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadCommitCommentCommentUser = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadCommitCommentComment = {
  url: string,
  html_url: string,
  id: number,
  node_id: string,
  user: Webhooks$WebhookPayloadCommitCommentCommentUser,
  position: null,
  line: null,
  path: null,
  commit_id: string,
  created_at: string,
  updated_at: string,
  author_association: string,
  body: string,
};

declare type Webhooks$WebhookPayloadCommitComment = {
  action: string,
  comment: Webhooks$WebhookPayloadCommitCommentComment,
  repository: Webhooks$PayloadRepository,
  sender: Webhooks$WebhookPayloadCommitCommentSender,
};

declare type Webhooks$WebhookPayloadCheckSuiteInstallation = {
  id: number,
};

declare type Webhooks$WebhookPayloadCheckSuiteSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadCheckSuiteOrganization = {
  login: string,
  id: number,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};

declare type Webhooks$WebhookPayloadCheckSuiteCheckSuiteHeadCommitCommitter = {
  name: string,
  email: string,
};

declare type Webhooks$WebhookPayloadCheckSuiteCheckSuiteHeadCommitAuthor = {
  name: string,
  email: string,
};

declare type Webhooks$WebhookPayloadCheckSuiteCheckSuiteHeadCommit = {
  id: string,
  tree_id: string,
  message: string,
  timestamp: string,
  author: Webhooks$WebhookPayloadCheckSuiteCheckSuiteHeadCommitAuthor,
  committer: Webhooks$WebhookPayloadCheckSuiteCheckSuiteHeadCommitCommitter,
};

declare type Webhooks$WebhookPayloadCheckSuiteCheckSuiteAppOwner = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadCheckSuiteCheckSuiteApp = {
  id: number,
  node_id: string,
  owner: Webhooks$WebhookPayloadCheckSuiteCheckSuiteAppOwner,
  name: string,
  description: null,
  external_url: string,
  html_url: string,
  created_at: string,
  updated_at: string,
};

declare type Webhooks$WebhookPayloadCheckSuiteCheckSuite = {
  id: number,
  head_branch: string,
  head_sha: string,
  status: string,
  conclusion: string,
  url: string,
  before: string,
  after: string,
  pull_requests: Array<any>,
  app: Webhooks$WebhookPayloadCheckSuiteCheckSuiteApp,
  created_at: string,
  updated_at: string,
  latest_check_runs_count: number,
  check_runs_url: string,
  head_commit: Webhooks$WebhookPayloadCheckSuiteCheckSuiteHeadCommit,
};

declare type Webhooks$WebhookPayloadCheckSuite = {
  action: string,
  check_suite: Webhooks$WebhookPayloadCheckSuiteCheckSuite,
  repository: Webhooks$PayloadRepository,
  organization: Webhooks$WebhookPayloadCheckSuiteOrganization,
  sender: Webhooks$WebhookPayloadCheckSuiteSender,
  installation: Webhooks$WebhookPayloadCheckSuiteInstallation,
};

declare type Webhooks$WebhookPayloadCheckRunInstallation = {
  id: number,
};

declare type Webhooks$WebhookPayloadCheckRunSender = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadCheckRunOrganization = {
  login: string,
  id: number,
  node_id: string,
  url: string,
  repos_url: string,
  events_url: string,
  hooks_url: string,
  issues_url: string,
  members_url: string,
  public_members_url: string,
  avatar_url: string,
  description: string,
};

declare type Webhooks$PayloadRepositoryOwner = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
  name?: string,
  email?: string,
};

declare type Webhooks$PayloadRepository = {
  id: number,
  node_id: string,
  name: string,
  full_name: string,
  owner: Webhooks$PayloadRepositoryOwner,
  private: boolean,
  html_url: string,
  description: null,
  fork: boolean,
  url: string,
  forks_url: string,
  keys_url: string,
  collaborators_url: string,
  teams_url: string,
  hooks_url: string,
  issue_events_url: string,
  events_url: string,
  assignees_url: string,
  branches_url: string,
  tags_url: string,
  blobs_url: string,
  git_tags_url: string,
  git_refs_url: string,
  trees_url: string,
  statuses_url: string,
  languages_url: string,
  stargazers_url: string,
  contributors_url: string,
  subscribers_url: string,
  subscription_url: string,
  commits_url: string,
  git_commits_url: string,
  comments_url: string,
  issue_comment_url: string,
  contents_url: string,
  compare_url: string,
  merges_url: string,
  archive_url: string,
  downloads_url: string,
  issues_url: string,
  pulls_url: string,
  milestones_url: string,
  notifications_url: string,
  labels_url: string,
  releases_url: string,
  deployments_url: string,
  created_at: string | number,
  updated_at: string,
  pushed_at: string | number,
  git_url: string,
  ssh_url: string,
  clone_url: string,
  svn_url: string,
  homepage: null,
  size: number,
  stargazers_count: number,
  watchers_count: number,
  language: null,
  has_issues: boolean,
  has_projects: boolean,
  has_downloads: boolean,
  has_wiki: boolean,
  has_pages: boolean,
  forks_count: number,
  mirror_url: null,
  archived: boolean,
  open_issues_count: number,
  license: null,
  forks: number,
  open_issues: number,
  watchers: number,
  default_branch: string,
  stargazers?: number,
  master_branch?: string,
  permissions?: Webhooks$PayloadRepositoryPermissions,
};

declare type Webhooks$WebhookPayloadCheckRunCheckRunAppOwner = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadCheckRunCheckRunApp = {
  id: number,
  node_id: string,
  owner: Webhooks$WebhookPayloadCheckRunCheckRunAppOwner,
  name: string,
  description: null,
  external_url: string,
  html_url: string,
  created_at: string,
  updated_at: string,
};

declare type Webhooks$WebhookPayloadCheckRunCheckRunCheckSuiteAppOwner = {
  login: string,
  id: number,
  node_id: string,
  avatar_url: string,
  gravatar_id: string,
  url: string,
  html_url: string,
  followers_url: string,
  following_url: string,
  gists_url: string,
  starred_url: string,
  subscriptions_url: string,
  organizations_url: string,
  repos_url: string,
  events_url: string,
  received_events_url: string,
  type: string,
  site_admin: boolean,
};

declare type Webhooks$WebhookPayloadCheckRunCheckRunCheckSuiteApp = {
  id: number,
  node_id: string,
  owner: Webhooks$WebhookPayloadCheckRunCheckRunCheckSuiteAppOwner,
  name: string,
  description: null,
  external_url: string,
  html_url: string,
  created_at: string,
  updated_at: string,
};

declare type Webhooks$WebhookPayloadCheckRunCheckRunCheckSuite = {
  id: number,
  head_branch: string,
  head_sha: string,
  status: string,
  conclusion: string,
  url: string,
  before: string,
  after: string,
  pull_requests: Array<any>,
  app: Webhooks$WebhookPayloadCheckRunCheckRunCheckSuiteApp,
  created_at: string,
  updated_at: string,
};

declare type Webhooks$WebhookPayloadCheckRunCheckRunOutput = {
  title: string,
  summary: string,
  text: string,
  annotations_count: number,
  annotations_url: string,
};

declare type Webhooks$WebhookPayloadCheckRunCheckRun = {
  id: number,
  head_sha: string,
  external_id: string,
  url: string,
  html_url: string,
  status: string,
  conclusion: string,
  started_at: string,
  completed_at: string,
  output: Webhooks$WebhookPayloadCheckRunCheckRunOutput,
  name: string,
  check_suite: Webhooks$WebhookPayloadCheckRunCheckRunCheckSuite,
  app: Webhooks$WebhookPayloadCheckRunCheckRunApp,
  pull_requests: Array<any>,
};

declare type Webhooks$WebhookPayloadCheckRun = {
  action: string,
  check_run: Webhooks$WebhookPayloadCheckRunCheckRun,
  repository: Webhooks$PayloadRepository,
  organization: Webhooks$WebhookPayloadCheckRunOrganization,
  sender: Webhooks$WebhookPayloadCheckRunSender,
  installation: Webhooks$WebhookPayloadCheckRunInstallation,
  requested_action: { identifier: string },
};

declare interface Webhooks$WebhookEvent<T> {
  id: string;
  name: string;
  payload: T;
  protocol?: "http" | "https";
  host?: string;
  url?: string;
}
declare class Webhooks {
  constructor(options?: Options): this;
  on(event: "error", callback: (event: Error) => void): void;
  on(
    event: "*" | string[],
    callback: (event: Webhooks$WebhookEvent<any>) => Promise<void> | void,
  ): void;
  on(
    event:
      | "check_run"
      | "check_run.completed"
      | "check_run.created"
      | "check_run.requested_action"
      | "check_run.rerequested",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadCheckRun>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "check_suite"
      | "check_suite.completed"
      | "check_suite.requested"
      | "check_suite.rerequested",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadCheckSuite>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "commit_comment" | "commit_comment.created",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadCommitComment>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "content_reference",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadContentReference>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "create",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadCreate>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "delete",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadDelete>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "deployment",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadDeployment>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "deployment_status",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadDeploymentStatus>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "fork",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadFork>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "github_app_authorization",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadGithubAppAuthorization>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "gollum",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadGollum>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "installation"
      | "installation.created"
      | "installation.deleted"
      | "installation.new_permissions_accepted",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadInstallation>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "installation_repositories"
      | "installation_repositories.added"
      | "installation_repositories.removed",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadInstallationRepositories>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "issue_comment"
      | "issue_comment.created"
      | "issue_comment.deleted"
      | "issue_comment.edited",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadIssueComment>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "issues"
      | "issues.assigned"
      | "issues.closed"
      | "issues.deleted"
      | "issues.demilestoned"
      | "issues.edited"
      | "issues.labeled"
      | "issues.milestoned"
      | "issues.opened"
      | "issues.pinned"
      | "issues.reopened"
      | "issues.transferred"
      | "issues.unassigned"
      | "issues.unlabeled"
      | "issues.unpinned",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadIssues>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "label" | "label.created" | "label.deleted" | "label.edited",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadLabel>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "marketplace_purchase"
      | "marketplace_purchase.cancelled"
      | "marketplace_purchase.changed"
      | "marketplace_purchase.pending_change"
      | "marketplace_purchase.pending_change_cancelled"
      | "marketplace_purchase.purchased",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadMarketplacePurchase>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "member" | "member.added" | "member.deleted" | "member.edited",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadMember>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "membership" | "membership.added" | "membership.removed",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadMembership>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "milestone"
      | "milestone.closed"
      | "milestone.created"
      | "milestone.deleted"
      | "milestone.edited"
      | "milestone.opened",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadMilestone>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "organization"
      | "organization.member_added"
      | "organization.member_invited"
      | "organization.member_removed",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadOrganization>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "org_block" | "org_block.blocked" | "org_block.unblocked",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadOrgBlock>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "page_build",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadPageBuild>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "project_card"
      | "project_card.converted"
      | "project_card.created"
      | "project_card.deleted"
      | "project_card.edited"
      | "project_card.moved",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadProjectCard>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "project_column"
      | "project_column.created"
      | "project_column.deleted"
      | "project_column.edited"
      | "project_column.moved",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadProjectColumn>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "project"
      | "project.closed"
      | "project.created"
      | "project.deleted"
      | "project.edited"
      | "project.reopened",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadProject>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "public",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadPublic>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "pull_request"
      | "pull_request.assigned"
      | "pull_request.closed"
      | "pull_request.edited"
      | "pull_request.labeled"
      | "pull_request.opened"
      | "pull_request.ready_for_review"
      | "pull_request.reopened"
      | "pull_request.review_request_removed"
      | "pull_request.review_requested"
      | "pull_request.unassigned"
      | "pull_request.unlabeled"
      | "pull_request.synchronize",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadPullRequest>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "pull_request_review"
      | "pull_request_review.dismissed"
      | "pull_request_review.edited"
      | "pull_request_review.submitted",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadPullRequestReview>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "pull_request_review_comment"
      | "pull_request_review_comment.created"
      | "pull_request_review_comment.deleted"
      | "pull_request_review_comment.edited",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadPullRequestReviewComment>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "push",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadPush>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "release" | "release.published",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadRelease>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "repository"
      | "repository.archived"
      | "repository.created"
      | "repository.deleted"
      | "repository.privatized"
      | "repository.publicized"
      | "repository.unarchived",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadRepository>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "repository_import",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadRepositoryImport>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "repository_vulnerability_alert"
      | "repository_vulnerability_alert.create"
      | "repository_vulnerability_alert.dismiss"
      | "repository_vulnerability_alert.resolve",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadRepositoryVulnerabilityAlert>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "security_advisory"
      | "security_advisory.performed"
      | "security_advisory.published"
      | "security_advisory.updated",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadSecurityAdvisory>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "status",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadStatus>,
    ) => Promise<void> | void,
  ): void;
  on(
    event:
      | "team"
      | "team.added_to_repository"
      | "team.created"
      | "team.deleted"
      | "team.edited"
      | "team.removed_from_repository",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadTeam>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "team_add",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadTeamAdd>,
    ) => Promise<void> | void,
  ): void;
  on(
    event: "watch" | "watch.started",
    callback: (
      event: Webhooks$WebhookEvent<Webhooks$WebhookPayloadWatch>,
    ) => Promise<void> | void,
  ): void;
  sign(data: any): string;
  verify(eventPayload: any, signature: string): boolean;
  verifyAndReceive(options: {
    id: string,
    name: string,
    payload: any,
    signature: string,
  }): Promise<void>;
  receive(options: {
    id: string,
    name: string,
    payload: any,
  }): Promise<void>;
  removeListener(
    event: string | string[],
    callback: (event: Webhooks$WebhookEvent<any>) => void,
  ): void;
  removeListener(
    event: string | string[],
    callback: (event: Webhooks$WebhookEvent<any>) => Promise<void>,
  ): void;
  middleware(
    request: http.IncomingMessage,
    response: http.ServerResponse,
    next?: (err?: any) => void,
  ): void | Promise<void>;
}

declare module "@octokit/webhooks" {
  declare module.exports: typeof Webhooks;
}
